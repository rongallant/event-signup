include ../../mixins/personSelector
include ../../mixins/scheduleDatesSelector
include ../../mixins/selector
include ../addresses/parts/addressFields
include ../addresses/parts/addressSelector
include ../scheduleDates/parts/form
include ../includes/formToolbar
include ../includes/formElements

extend ../layout

append stylesheets
    link(rel="stylesheet", type="text/css", href="/pickadate/themes/classic.css")
    link(rel="stylesheet", type="text/css", href="/pickadate/themes/classic.date.css")
    link(rel="stylesheet", type="text/css", href="/pickadate/themes/classic.time.css")

block toolbar
    +formToolbar

append javascripts
    script(src="/javascripts/scheduleDayForm.js")
    script(src="/pickadate/picker.js")
    script(src="/pickadate/picker.date.js")
    script(src="/pickadate/picker.time.js")
    // Local Form Scripts
    script.
        var activityListContainer = !{ activities ? JSON.stringify(activities) : '[]' }

        function customValidators($form, fields, guests, pets, formErrors) {
            if (typeof formErrors == 'undefined') {
                formErrors = []
            }
            if (fields['activityArray'].length > 25) {
                formErrors.push('No more than 25 activities')
            }
            console.log(formErrors)
            if (formErrors.length > 0) {
                $form.form('add errors', formErrors)
            }
            return (formErrors.length > 0)
        }

        function addDays(date, days) {
            var result = new Date(date)
            result.setDate(result.getDate() + days)
            return result
        }
        $(function(){
            var validationRules = {
                fields: {
                    eventName : ['empty'],
                    description: ['empty'],
                    mainPerson: ['empty'],
                    location: ['empty'],
                    schedules: ['empty'],
                    _contact: ['empty']
                },
                inline : false,
                keyboardShortcuts: false,
                onFailure: function(formErrors, fields) {
                    console.log(formErrors)
                    fields['activityArray'] = activityListContainer
                    customValidators($form, fields, formErrors)
                    return false
                },
                onSuccess: function(event, fields) {
                    fields['activityArray'] = activityListContainer
                    if (customValidators($form, fields)) { // has errors
                        return false
                    }
                    $.ajax({
                        type: '#{formMethod}',
                        url: '#{formAction}',
                        data: fields,
                        dataType: 'JSON',
                        statusCode: {
                            201: function(data) {
                                // console.log(data)
                                $.get('/message/success/' + data.message)
                            }
                        }
                    })
                    .error(function(response) {
                        console.log("Ajax Error")
                        console.log(response)
                        toaster('error', 'Error: ' + response.statusText)
                    })
                    .done(function(response) {
                        location.replace('#{editAction}' + response.data.id)
                    })
                    return false
                }
            }

            var $form = $('form[name=mainForm]')

            // CREATE / SAVE
            $form.form(validationRules)

            $deleteModal = $('.ui.delete.modal')
            $deleteModal.modal({
                onApprove: function(){
                    $.ajax({
                        type: 'delete',
                        data:  $form.form('get values'),
                        url: '#{apiItem}#{data.id}',
                        dataType: 'JSON',
                        statusCode: {
                            501: function() {
                                $.get('/message/error/Error deleting')
                            }
                        }
                    })
                    .done(function(response) {
                        location.replace('#{listAction}')
                    })
                }
            })
            $('.delete.button').click(function(){
                $deleteModal.modal('show')
            })
            $form.find('.personSelector').search(localPersonSearch)
            $form.find('#addressSearch').search(googleAddressSearchAndPopulate)
            $form.find('select.dropdown, .selection.dropdown').dropdown()
            $form.find('input[data-maxsize], textarea[data-maxsize]').maxLengthCounter()
            $form.find('#startDate').pickadate()
            $form.find('#startTime').pickatime()
            $form.find('#endDate').pickadate()
            $form.find('#endTime').pickatime()
        })

    -var activityFormRules = "{name:{rules:[{type:'empty'},{type:'maxLength[70]'}]},description:[{type:'maxLength[2000]'}],startTime:{rules:[{type:'empty'}]},endTime:{rules:[{type:'empty'}]}}"
    -var activityRowItem = "fields.name + ' - ' + fields.startTime + ' to ' + fields.startTime"
    +selectorJs('activities', 25, activityFormRules, activityRowItem, 'activityListContainer')

append appContent

    form.ui.form(name='mainForm')

        +mainFormWrapper

            +formSegment

                +formSegmentHeader('Event Details')

                +formSegmentIntro
                    p Before you start, make sure you have created the person in the person section you wish to be the main contact for this event.

                .field.required
                    label(for="eventName") Event Name
                    input(type="text", name="name", id="eventName", value=data.name)

                .field.required.textarea
                    label(for='description') Activity Description
                    +textarea('description', 'description', '2000')
                        = data.description

                .field.required
                    label(for='_contact') Main Contact
                    +personSelector('_contact', '_contact', data._contact?data._contact.id:'', data._contact?data._contact.fullName:'')

            +formSegment

                +formSegmentHeader("Address")

                +formSegmentIntro
                p Your address is used to know where you are coming from and is another way to contact you in case we need to.

                +addressFields(data.address?data.address:'')

            +formSegment

                +formSegmentHeader('Event Schedule')

                +formSegmentIntro

                .fields

                    .field.ten.wide.required
                        label(for="startDate") Start Date
                        input(type='text', name="startDate", id="startDate", value=data.startDate, placeholder='Date')

                    .field.six.wide.required
                        label(for="startDate") Start Time
                        input(type='text', name="startTime", id="startTime", value=data.startTime, placeholder='Time')

                .fields

                    .field.ten.wide.required
                        label(for="endDate") End Date
                        input(type='text', name="endDate", id="endDate", value=data.endDate, placeholder='Date')

                    .field.six.wide.required
                        label(for="endDate") End Time
                        input(type='text', name="endTime", id="endTime", value=data.endTime, placeholder='Time')


            .ui.relaxed.stackable.grid
                .eight.wide.column
                    +formSegment
                        +selectorListPanel('activities', data.guests, 'Activities', '', '')

            div(style='display: none;')
                input#PreventChromeAutocomplete(type='text', name='PreventChromeAutocomplete', autocomplete='address-level4')
                input(type="hidden", name="id", value=data.id)

        +messageContainer

    +selectorModal('activities', 'Activity', '', '')
        .field.required
            label(for='name') Activity Name
            input(type='text', name='name', id='name')

        .field.required.textarea
            label(for='description') Activity Description
            +textarea('description', 'description', '2000')

        .two.fields

            .field.required
                label(for="startTime") Start Time
                input(type="text", name="startTime", id="startTime")

            .field.required#endTimeField
                label(for="endTime") End Time
                input(type="text", name="endTime", id="endTime")

        .field.required
            label(for='_contact') Main Contact
            +personSelector('_contact', '_contact', data._contact?data._contact.id:'', data._contact?data._contact.fullName:'')
