include ../../mixins/personSelector
include ../../mixins/scheduleDatesSelector
include ../../mixins/selector
include ../addresses/parts/addressFields
include ../addresses/parts/addressSelector
include ../includes/formToolbar
include ../includes/formElements

extend ../layout

append stylesheets
    link(rel="stylesheet", type="text/css", href="/lib/pickadate/themes/classic.css")
    link(rel="stylesheet", type="text/css", href="/lib/pickadate/themes/classic.date.css")
    link(rel="stylesheet", type="text/css", href="/lib/pickadate/themes/classic.time.css")

block toolbar
    +formToolbar

append appContent

    - var isIncomplete = function(formMode) { return formMode !== 'edit' }

    form.ui.form(name='mainForm')

        +mainFormWrapper

            +formSegment

                +formSegmentHeader('Event Details')

                +formSegmentIntro
                    p Before you start, make sure you have created the person in the person section you wish to be the main contact for this event.

                .field.required
                    label(for="eventName") Event Name
                    input(type="text", name="name", id="eventName", value=data.name)

                .field
                    label(for='description') Activity Description
                    +textareaEditor('description', 'description')
                        = data.description

                .field.required
                    label(for='_contact') Main Contact
                    +personSelector('_contact', '_contact', data._contact?data._contact.id:'')

                .ui.horizontal.divider

                .field
                    label(for='active') Is the current event?
                    #activeCheck.ui.toggle.checkbox
                        input(type="checkbox", name="active", id="active", checked=data.active)
                        label(for="active") Other events will be set to false.

            +formSegment(isIncomplete(formMode))

                +formSegmentHeader("Address")

                +formSegmentIntro
                p Your address is used to know where you are coming from and is another way to contact you in case we need to.

                +addressFields(data.address?data.address:'')

            +formSegment(isIncomplete(formMode))

                +formSegmentHeader('Event Schedule')

                +formSegmentIntro

                .fields

                    .field.ten.wide.required
                        label(for="startDate") Start Date
                        input(type='text', name="startDate", id="startDate", value=data.startDate, placeholder='Date')

                    .field.six.wide.required
                        label(for="startDate") Start Time
                        input(type='text', name="startTime", id="startTime", value=data.startTime, placeholder='Time')

                .fields

                    .field.ten.wide.required
                        label(for="endDate") End Date
                        input(type='text', name="endDate", id="endDate", value=data.endDate, placeholder='Date')

                    .field.six.wide.required
                        label(for="endTime") End Time
                        input(type='text', name="endTime", id="endTime", value=data.endTime, placeholder='Time')

            .ui.relaxed.stackable.grid
                .eight.wide.column
                    +formSegment(isIncomplete(formMode))
                        +selectorListPanel('meals', mealArray, 'Meal', 'green food', 'green')

                .eight.wide.column
                    +formSegment(isIncomplete(formMode))
                        +selectorListPanel('activities', activityArray, 'Activity', 'orange map', 'orange')

                .eight.wide.column
                    +formSegment(isIncomplete(formMode))
                        +selectorListPanel('tasks', taskArray, 'Task', 'yellow heart', 'yellow')

            div(style='display: none;')
                input#PreventChromeAutocomplete(type='text', name='PreventChromeAutocomplete', autocomplete='address-level4')
                input(type="hidden", name="id", value=data.id)

        +messageContainer

    -// *************************************************
    -// FORM MODALS
    -// *************************************************

    -// Meals Form
    +selectorModal('meals', 'Meal', 'green food', 'green')

    -// Activity Form
    +selectorModal('activities', 'Activity', 'orange map', 'orange')

    -// Tasks Form
    +selectorModal('tasks', 'Task', 'yellow heart', 'yellow')

append javascripts
    script(src="/javascripts/scheduleDayForm.js")
    script(src='/javascripts/selector.js')
    script(src="/lib/pickadate/picker.js")
    script(src="/lib/pickadate/picker.date.js")
    script(src="/lib/pickadate/picker.time.js")
    script(src="/lib/moment/moment-range.min.js")
    script.
        var globalModelDatePattern = '#{global.modalPatternDate}'
        var globalViewDatePattern = '#{global.viewPatternDate}'
        var globalViewDateTimePattern = 'M/D/YY - h:mm a'

        var eventDays = function(startDate, endDate) {
            var a = []
            var s = moment.utc(startDate)
            var e = moment.utc(endDate)
            var range = moment.range(s, e);
            range.by('days', function(moment) {
                a.push(moment)
            })
            return a
        }
        $.fn.populateDateSelect = function(arrayOfDates) {
            for (var i in arrayOfDates) {
                var d = moment.utc(arrayOfDates[i])
                $(this).append($("<option />")
                    .val(d.utc().format(globalModelDatePattern))
                    .text(d.format(globalViewDatePattern)))
            }
            $(this).dropdown()
        }

        var selectorModalsInit = function()
        {
            /* ************************************************************ */
            /* * ACTIVITIES                                               * */
            /* ************************************************************ */

            var activityFormInit = function(conf) {
                $modal = $(conf.modalJQID)
                tinymce.init($.extend({ selector: conf.modalJQID + ' textarea.mde' }, tinymceConfig))
                $modal.find('.personSelector.ui.dropdown').dropdown({
                    apiSettings: {url: '/api/persons/dropdown/results?simple=1'}
                })
                return false
            },
            activitiesSelectorSettings = {
                selectorId: 'activities',
                maxListLength: 25,
                listUri: '#{apiUri.secure.activities.byEvent + data.id}',
                crudUri: '#{apiUri.secure.activity}',
                formUrl: '/admin/activities/modal/',
                formInitCallback: activityFormInit,
                rowItem: function(rowObj) { return moment(rowObj.startDateTime).format(globalViewDateTimePattern) + ' (' +rowObj.name + ')' },
                formRules: {
                    name: ['maxLength[70]', 'empty'],
                    description: 'maxLength[2000]',
                    location: ['maxLength[500]', 'empty'],
                    startTime: 'empty',
                    duration: ['number', 'empty'],
                    _contact: 'empty',
                    effort:['number', 'empty'],
                    personsRequired: ['number', 'empty']
                }
            },
            activitiesSelector = initSelector(activitiesSelectorSettings)

            /* ************************************************************ */
            /* * MEALS                                                    * */
            /* ************************************************************ */

            var mealsSelectorSettings = {
                selectorId: 'meals',
                maxListLength: 25,
                listUri: '#{apiUri.secure.meals.byEvent + data.id}',
                crudUri: '#{apiUri.secure.meal}',
                formUrl: '/admin/meals/modal/',
                formInitCallback: activityFormInit,
                rowItem: function(rowObj) { return moment(rowObj.startDateTime).utc().format(globalViewDateTimePattern) + ' (' +rowObj.name + ')' },
                formRules: {
                    name: ['maxLength[70]', 'empty'],
                    description: 'maxLength[2000]',
                    location: ['maxLength[500]', 'empty'],
                    startDateTime: 'empty',
                    duration: ['number', 'empty'],
                    _contact: 'empty'
                }
            },
            mealsSelector = initSelector(mealsSelectorSettings)

            /* ************************************************************ */
            /* * TASKS                                                    * */
            /* ************************************************************ */

            var tasksSelectorSettings = {
                selectorId: 'tasks',
                maxListLength: 50,
                listUri: '#{apiUri.secure.tasks.byEvent + data.id}',
                crudUri: '#{apiUri.secure.task}',
                formUrl: '/admin/tasks/modal/',
                formInitCallback: activityFormInit,
                rowItem: function(rowObj) { return moment(rowObj.startDateTime).format(globalViewDateTimePattern) + ' (' +rowObj.name + ')' },
                formRules: {
                    name: ['maxLength[70]', 'empty'],
                    description: 'maxLength[2000]',
                    location: ['maxLength[500]', 'empty'],
                    startTime: 'empty',
                    duration: ['number', 'empty'],
                    _contact: 'empty'
                }
            },
            tasksSelector = initSelector(tasksSelectorSettings)
            return false
        }

        var mainFormInit = function() {
            var $form = $('form[name=mainForm]')
            $form.form({
                fields: {
                    eventName : 'empty',
                    description: ['empty', 'maxLength[5000]'],
                    mainPerson: 'empty',
                    location: 'empty',
                    schedules: 'empty',
                    _contact: 'empty',
                },
                inline : false,
                keyboardShortcuts: false,
                onSuccess: function(event, fields) {
                    $.ajax({
                        type: '#{formMethod}',
                        url: '#{formAction}',
                        data: fields,
                        dataType: 'JSON',
                        statusCode: {
                            201: function(data) {
                                $.get('/message/success/' + data.message)
                            }
                        }
                    })
                    .error(function(response) {
                        console.log("Ajax Error")
                        toaster('error', 'Error: ' + response.statusText)
                    })
                    .done(function(response) {
                        location.replace('#{editAction}' + response.data.id)
                    })
                    return false
                }
            })
            var deleteComplete = function(){
                location.replace('#{listAction}')
                return false
            }
            deleteConfirmation('#{apiItem}#{data.id}', $form.form('get values'), deleteComplete)
            $form.find('.personSelector.ui.dropdown').dropdown({
                apiSettings: {url: '/api/persons/dropdown/results?simple=1'}
            })
            $form.find('#addressSearch').search(googleAddressSearchAndPopulate)
            $form.find('#startDate').pickadate()
            $form.find('#startTime').pickatime()
            $form.find('#endDate').pickadate()
            $form.find('#endTime').pickatime()
            tinymce.init(
                $.extend({
                    selector: 'form[name=mainForm] textarea.mde'
                }, tinymceConfig)
            )
            $form.find('#activeCheck').checkbox({
                onChecked: function() {
                    setActiveState('#{apiUri.secure.events.disableOthers + data.id}')
                },
                onUnchecked: function() {
                    setActiveState('#{apiUri.secure.event.deactivate + data.id}')
                }
            })
            return false
        }

        var setActiveState = function(apiUri, eventId) {
            $.ajax({
                type: 'put',
                url: apiUri,
                dataType: 'JSON',
                statusCode: {
                    201: function(data) {
                        toaster('success', data.message)
                    },
                    500: function(data) {
                        toaster('error', data.message)
                    }
                }
            })
        }

        $(function() {
            mainFormInit()
            selectorModalsInit()
        })
