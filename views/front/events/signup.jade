include ../../mixins/selector
include parts/emergencyContactForm

extends ../layout

append stylesheets
    +emergencyContactStyles('emergencyContact')

append javascripts
    + emergencyContactScripts('emergencyContact',
        data._contact.id,
        data._contact.emergencyContact,
        apiUri.secure.person.saveEmergencyContact)
    script(src='/javascripts/selector.js')
    script.
        // Global Vars
        var reservationId = '#{data.id ? data.id : ''}'
        var eventId = '#{data._event ? data._event.id : ''}'
        var contactId = '#{data._contact ? data._contact.id : ''}'

        function arrNoDupe(a) {
            var temp = {};
            for (var i = 0; i < a.length; i++)
                temp[a[i]] = true;
            var r = [];
            for (var k in temp)
                r.push(k);
            return r;
        }

        var selectorsInit = function() {

            // Guest Selector Configuration
            var guestFormInit = function(conf) {
                $modal = $(conf.modalJQID)
                $modal.find('input#_reservation').val(reservationId)
                $modal.find('input#_contact').val(contactId)
                return false
            }
            var guestsSelectorSettings = {
                selectorId: 'guests',
                maxListLength: 5,
                listUri: '#{apiUri.public.guests.byReservation}' + reservationId,
                crudUri: '#{apiUri.public.guests.base}',
                formUrl: '/events/guest/modal/',
                formInitCallback: guestFormInit,
                rowItem: function(rowObj) { return rowObj.firstName + ' ' + rowObj.lastName },
                formRules: {
                    firstName: {rules:[{type:'empty'},{type:'maxLength[35]'}]},
                    lastName: {rules:[{type:'empty'},{type:'maxLength[35]'}]},
                    email:{rules:[{type:'email'}]},
                    phone:{rules:[{type:'maxLength[18]'}]}
                }
            }
            var guestsSelector = initSelector(guestsSelectorSettings)

            // Pet Selector Configuration
            var petsFormInit = function(conf) {
                $modal = $(conf.modalJQID)
                $modal.find('input#_reservation').val(reservationId)
                $modal.find('input#_contact').val(contactId)
                return false
            }
            var petsSelectorSettings = {
                selectorId: 'pets',
                maxListLength: 2,
                listUri: '#{apiUri.public.pets.byReservation}' + reservationId,
                crudUri: '#{apiUri.public.pets.base}',
                formUrl: '/events/pet/modal/',
                formInitCallback: guestFormInit,
                rowItem: function(rowObj) { return rowObj.petName + ' - ' + rowObj.petWeight + ' lb'
                },
                formRules: {petName:{rules:[{type:'empty'}, {type:'maxLength[35]'}]},petWeight:{rules:[{type:'empty'}, {type:'maxLength[3]'}]}}
            }
            var petsSelector = initSelector(petsSelectorSettings)
            return false
        }

        // Main Form
        var mainFormInit = function() {
            var $form =  $('form[name=mainForm]')

            var validationRules = {
                emergencyContact_fullName : {rules:[{type:'empty'}, {type:'maxLength[70]'}]},
                emergencyContact_phone : {rules:[{type:'empty'}, {type:'maxLength[15]'}]},
                emergencyContact_email : {rules:[{type:'maxLength[254]'}, {type:'email'}]}
            }

            // CREATE / SAVE
            $form.form({
                debug: false,
                fields: validationRules,
                keyboardShortcuts: false,
                onSuccess: function(event, fields) {
                    console.log('Attemping to save into #{formAction} via #{formMethod}' )
                    $.ajax({
                        type: '#{formMethod}',
                        url: '#{apiItem}',
                        data: fields,
                        dataType: 'JSON',
                        headers: {
                            "x-access-token":"#{authToken}"
                        },
                        statusCode: {
                            201: function(data, textStatus, jqXHR) {
                                $.get('/message/success/Saved successfully')
                            }
                        }
                    })
                    .error(function(response) {
                        console.error('AJAX ERROR')
                        console.error(JSON.parse(response.responseText).message)
                        var formErrors = []
                        var p = JSON.parse(response.responseText).errors
                        for (var key in p) {
                            if (p.hasOwnProperty(key)) {
                                formErrors.push(p[key].message)
                            }
                        }
                        if (formErrors.length > 0) {
                            $form.form('add errors', formErrors)
                        }
                        toaster('error', JSON.parse(response.responseText).message)
                        return false
                    })
                    .done(function(response) {
                        console.log('SUCCESS')
                        console.log(response)
                        location.replace('#{formComplete}')
                    })
                    return false
                }
            })
            return false
        }

        var parseActivityId = function(id) {
            var parts = id.split('-')
            return parts.length === 2 ? parts : []
        }

        var initEventDays = function() {
            $('.tabular.menu .item').tab({
                auto: true,
                cache: false,
                path: '/events/eventDay/#{data._event.id}/#{data.id}/',
                onLoad: function(tabPath, parameterArray, historyEvent) {
                    initEventDayTab()
                }
            })
            return false
        }

        var initEventDayTab = function() {
            var resActivities = !{JSON.stringify(data.activities)},
                resMeals = !{JSON.stringify(data.meals)},
                resTasks = !{JSON.stringify(data.tasks)},
                selectedActivities = arrNoDupe(resActivities.concat(resMeals, resTasks))

            var saveActivityCall = function(activityId, checked) {
                var parts = parseActivityId(activityId)
                $.ajax({
                    type: 'put',
                    url: '#{apiUri.secure.reservation.activity}' + reservationId,
                    data: {
                        "activityId": parts[1],
                        "activityType": parts[0],
                        "isChecked": checked
                    },
                    // context: '#schedule .item.0',
                    headers: { "x-access-token":"#{authToken}" }
                }).done(function(response) {
                    var data = response.data
                    resActivities = data.activities,
                    resMeals = data.meals,
                    resTasks = data.tasks,
                    selectedActivities = arrNoDupe(resActivities.concat(resMeals, resTasks))
                })
                return false
            }
            $('.activitiesActivities .checkbox, .activitiesMeals .checkbox, .activitiesTasks .checkbox')
            .checkbox({
                onChecked: function() {
                    saveActivityCall($(this).attr('id'), 1)
                },
                onUnchecked: function() {
                    saveActivityCall($(this).attr('id'), 0)
                }
            })

            $('[name=goingActivities], [name=goingMeals], [name=goingTasks]')
            .each(function(index, field) {
                var parts = parseActivityId($(field).prop('id'))
                var checked = false
                for (var i in selectedActivities) {
                    checked = (parts[1] === selectedActivities[i])
                    if (checked) break
                }
                $(field).prop('checked', checked)
            })
            return false
        }

        $(function(){
            mainFormInit()
            selectorsInit()
            initEventDays()
            $('.tabular.menu').find('.item.0').click()
        })

append frontContent

    h1.ui.header Signup for #{data._event.name}
    .ui.hidden.divider

    -// pre= JSON.stringify(data, null, '\t')

    .ui.hidden.divider

    .ui.relaxed.stackable.grid

        .eight.wide.column

            +selectorListPanel('guests', data.guests, 'Guest', 'blue user', 'blue')

            +selectorListPanel('pets', data.pets, 'Pet', 'brown paw', 'brown')

        .eight.wide.column

            + emergencyContact('emergencyContact')

    include parts/eventDayFields

    .ui.container
        .ui.grid
            .sixteen.wide.right.aligned.column
                .ui.big.primary.submit.button
                    | Reserve Your Spot!

    -// *************************************************
    -// FORM MODALS
    -// *************************************************

    -// Guests Form
    +selectorModal('guests', 'Guest', 'user blue', 'blue')

    -// Pets Form
    +selectorModal('pets', 'Pet', 'paw brown', 'brown')
